// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ApolloClient = require("reason-apollo-client/src/ApolloClient.bs.js");
var ApolloClient__LinkWs = require("reason-apollo-client/src/@apollo/link-ws/ApolloClient__LinkWs.bs.js");
var ApolloClient__Utilities = require("reason-apollo-client/src/@apollo/client/utilities/ApolloClient__Utilities.bs.js");
var ApolloClient__ApolloClient = require("reason-apollo-client/src/@apollo/client/ApolloClient__ApolloClient.bs.js");
var ReasonMLCommunity__ApolloClient = require("reason-apollo-client/src/ReasonMLCommunity__ApolloClient.bs.js");
var ApolloClient__Link_Http_HttpLink = require("reason-apollo-client/src/@apollo/client/link/http/ApolloClient__Link_Http_HttpLink.bs.js");
var ApolloClient__SubscriptionsTransportWs = require("reason-apollo-client/src/subscriptions-transport-ws/ApolloClient__SubscriptionsTransportWs.bs.js");
var ApolloClient__Cache_InMemory_InMemoryCache = require("reason-apollo-client/src/@apollo/client/cache/inmemory/ApolloClient__Cache_InMemory_InMemoryCache.bs.js");

var headers = {
  "x-hasura-admin-secret": "testing"
};

var graphqlEndpoint = "localhost:8000/subgraphs/name/wild-cards/subgraph";

var isHttps = process.env.REACT_APP_IS_HTTPS === "true";

((require('isomorphic-fetch')));

var ws = (require('ws'));

var httpLink = ApolloClient__Link_Http_HttpLink.make((function (param) {
        return (
                isHttps ? "https://" : "http://"
              ) + graphqlEndpoint;
      }), undefined, Caml_option.some(fetch), Caml_option.some(headers), "include", undefined, undefined, undefined);

var wsLink = ApolloClient__LinkWs.WebSocketLink.make((
      isHttps ? "wss://" : "ws://"
    ) + graphqlEndpoint, ApolloClient__SubscriptionsTransportWs.ClientOptions.make({
          TAG: /* ConnectionParams */0,
          _0: {
            headers: headers
          }
        }, undefined, true, undefined, undefined, undefined, undefined, undefined), Caml_option.some(ws), undefined);

var terminatingLink = ReasonMLCommunity__ApolloClient.Link.split((function (param) {
        var definition = ApolloClient__Utilities.getOperationDefinition(param.query);
        if (definition !== undefined && definition.kind === "OperationDefinition") {
          return definition.operation === "subscription";
        } else {
          return false;
        }
      }), wsLink, httpLink);

var instance = ApolloClient.make(undefined, undefined, undefined, Caml_option.some(terminatingLink), ApolloClient__Cache_InMemory_InMemoryCache.make(undefined, undefined, undefined, undefined, undefined, undefined), undefined, undefined, true, undefined, ApolloClient__ApolloClient.DefaultOptions.make(ApolloClient__ApolloClient.DefaultMutateOptions.make(undefined, /* NetworkOnly */2, true, /* All */2, undefined, undefined), ApolloClient__ApolloClient.DefaultQueryOptions.make(/* NetworkOnly */2, /* All */2, undefined, undefined), ApolloClient__ApolloClient.DefaultWatchQueryOptions.make(/* NetworkOnly */3, /* All */2, undefined, undefined), undefined), undefined, undefined, undefined, undefined, undefined, undefined, undefined);

exports.headers = headers;
exports.graphqlEndpoint = graphqlEndpoint;
exports.isHttps = isHttps;
exports.ws = ws;
exports.httpLink = httpLink;
exports.wsLink = wsLink;
exports.terminatingLink = terminatingLink;
exports.instance = instance;
/* isHttps Not a pure module */
